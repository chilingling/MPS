{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSave","row","newData","toConsumableArray","state","dataSource","index","findIndex","item","key","splice","objectSpread","setState","exportFile","handleCompute","newgrossList","grossList","map","orderList","Math","max","predictList","newPABinitList","PABinitList","newplanList","planList","newnetList","netList","newplanOutList","planOutList","newPABOutList","PABOutList","newplanInputList","planInputList","currentStore","safeStore","addbatch","i","newatp","ATPList","tmp0","j","timezone","current","require","plan","predict","count","probatch","advance","_this2","react_default","a","createElement","className","type","min","value","onChange","e","Number","target","colSpan","style","width","ind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be4e225a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import XLSX from 'xlsx'\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      dataSource: [\n        {\n          key: '0',\n          timezone: '时区',\n          current: '当期',\n          require: '需求时区',\n          plan: '计划时区',\n          predict: '预测时区'\n        },\n        {\n          key: '1',\n          timezone: '时段',\n          // current: '预测量',\n          require: '1',\n          plan: '计划时区',\n          predict: '预测时区'\n        }\n      ],\n      count: 2,\n      currentStore: 120, // 现有库存量\n      safeStore: 20, // 安全库存量\n      probatch: 160, // 生产批量\n      addbatch: 160, // 批量增量值\n      advance: 1, // 提前期\n      predictList: [70, 70, 70, 70, 70, 80, 80, 80, 80, 80], // 预测量\n      orderList: [100, 90, 80, 60, 70, 90, 50, 100, 90, 70], // 订单量\n      grossList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 毛需求量\n      planList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 计划接收量\n      PABinitList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // PAB初值\n      netList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 净需求量\n      planOutList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 计划产出量\n      PABOutList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // PAB\n      planInputList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], // 计划投入量\n      ATPList: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] // ATP\n    }\n  }\n  handleSave = row => {\n    const newData = [...this.state.dataSource]\n    const index = newData.findIndex(item => row.key === item.key)\n    const item = newData[index]\n    newData.splice(index, 1, {\n      ...item,\n      ...row\n    })\n    this.setState({\n      dataSource: newData\n    })\n  }\n  componentDidMount () {\n    this.handleCompute()\n    this.exportFile()\n  }\n  exportFile = () => {\n    // let data = [this.state.predictList, this.state.orderList]\n    // const ws = XLSX.utils.aoa_to_sheet(data)\n    // const wb = XLSX.utils.book_new()\n    // XLSX.utils.book_append_sheet(wb, ws, \"MPS\")\n    // XLSX.writeFile(wb, 'MPS.xlsx')\n  }\n  handleCompute = () => {\n    let newgrossList = this.state.grossList\n    newgrossList = newgrossList.map((item, index) => { // 计算毛需求量\n      if (index < 2) {\n        return this.state.orderList[index]\n      } else if (index < 6) {\n        return Math.max(this.state.orderList[index], this.state.predictList[index])\n      } else {\n        return this.state.predictList[index]\n      }\n    })\n    let newPABinitList = this.state.PABinitList // PAB初值\n    let newplanList = this.state.planList // 计划接收量\n    let newnetList = this.state.netList // 净需求量\n    let newplanOutList = this.state.planOutList // 计划产出量\n    let newPABOutList = this.state.PABOutList // 当前时段的PAB值\n    let newplanInputList = this.state.planInputList // 计划投入量\n    newPABinitList[0] = this.state.currentStore // 当期的PAB 初值\n    newPABinitList[1] = this.state.currentStore - newgrossList[0] // 第一时段的PAB初值\n    // newplanList[0] = newPABinitList[0] > this.state.safeStore ? 0 : this.state.addbatch // 计划接收量\n    newnetList[0] = newPABinitList[1] > this.state.safeStore ? 0 : this.state.safeStore - newPABinitList[1]\n    newplanOutList[0] = newPABinitList[1] > 0 ? 0 : this.state.addbatch\n    newPABOutList[0] = newPABinitList[0] + newplanList[0] - newgrossList[0] + newplanOutList[0]\n    newplanInputList[0] = newplanOutList[0]\n    for (let i  = 1; i < 10; ++i) {\n      newPABinitList[i+1] = newPABOutList[i-1] - newgrossList[i] // 第一时段的PAB初值\n      // newplanList[i] = newPABinitList[i-1] > this.state.safeStore ? 0 : this.state.addbatch // 计划接收量\n      newnetList[i] = newPABinitList[i+1] > this.state.safeStore ? 0 : this.state.safeStore - newPABinitList[i+1]\n      newplanOutList[i] = newnetList[i] !== 0 ? this.state.addbatch : 0\n      newPABOutList[i] = newPABOutList[i-1] + newplanOutList[i] - newgrossList[i]\n      newplanInputList[i] = newplanOutList[i]\n    }\n    newplanInputList[10] = 0\n    // 计算ATP\n    let newatp = this.state.ATPList\n    for (let i = 0; i < 10; ++i) {\n      let tmp0 = this.state.orderList[i], j = i + 1\n      while (j < 10 && newplanOutList[j] === 0) {\n        tmp0 += this.state.orderList[j]\n        ++j;\n      }\n      // console.log(newplanOutList[i], newplanList[i], tmp0)\n       newatp[i] =  newplanOutList[i] === 0 ? 0 : newplanOutList[i] + newplanList[i] - tmp0\n    }\n    this.setState({\n      grossList: newgrossList,\n      PABinitList: newPABinitList,\n      // planList: newplanList,\n      netList: newnetList,\n      planOutList: newplanOutList,\n      PABOutList: newPABOutList,\n      planInputList: newplanInputList,\n      ATPList: newatp\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>MPS报表</h1>\n        <div className=\"current-box\">\n          <span className=\"current-item\">现有库存量：<input className=\"header-input\" type=\"number\" min=\"0\" value = {this.state.currentStore} onChange = {(e) => this.setState({  currentStore: Number(e.target.value) }, () => this.handleCompute())}/></span>\n          <span className=\"current-item\">安全库存量：<input className=\"header-input\" type=\"number\" min=\"0\" value = {this.state.safeStore} onChange = {(e) => this.setState({  safeStore: Number(e.target.value) }, () => this.handleCompute())}/></span>\n          <span className=\"current-item\">生产批量：<input className=\"header-input\" type=\"number\" min=\"0\" value = {this.state.probatch} onChange = {(e) => this.setState({  probatch: Number(e.target.value) }, () => this.handleCompute())}/></span>\n          <span className=\"current-item\">批量增量：<input className=\"header-input\" type=\"number\" min=\"0\" value = {this.state.addbatch} onChange = {(e) => this.setState({  addbatch: Number(e.target.value) }, () => this.handleCompute())}/></span>\n          <span className=\"current-item\">提前期：<input className=\"header-input\" type=\"number\" min=\"0\" value = {this.state.advance} onChange = {(e) => this.setState({  advance: Number(e.target.value) }, () => this.handleCompute())}/> 时段</span>\n        </div>\n        <div className='table-box'>\n        <table>\n          <thead>\n            <tr>\n              <td>时区</td>\n              <td>当期</td>\n              <td colSpan=\"2\">需求时区</td>\n              <td colSpan=\"4\">计划时区</td>\n              <td colSpan=\"4\">预测时区时区</td>\n            </tr>\n            <tr>\n              <td key=\"title\">时段</td>\n              <td></td>\n              <td>1</td>\n              <td>2</td>\n              <td>3</td>\n              <td>4</td>\n              <td>5</td>\n              <td>6</td>\n              <td>7</td>\n              <td>8</td>\n              <td>9</td>\n              <td>10</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td key=\"pretitle\">预测量</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.predictList.map((item, index) => \n                <td key={index}><input style={{ width: '46px' }} type=\"number\" min=\"0\" value={item} onChange = {(e) => {\n                  this.setState({ predictList: this.state.predictList.map((item, ind) => {\n                    if (ind === index) {\n                      return e.target.value\n                    } else {\n                      return item\n                    }\n                })}, () => this.handleCompute())}}/></td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">订单量</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.orderList.map((item, index) => <td key={index}><input style={{ width: '46px' }} type=\"number\" min=\"0\" value={item} onChange = {(e) => {\n                  this.setState({ orderList: this.state.orderList.map((item, ind) => {\n                    if (ind === index) {\n                      return e.target.value\n                    } else {\n                      return item\n                    }\n              })}, () => this.handleCompute())}}/></td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">毛需求量</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.grossList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">计划接收量</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.planList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">PAB初值</td>\n              {\n                this.state.PABinitList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">净需求量</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.netList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">计划产出量</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.planOutList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">PAB</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.PABOutList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">计划投入量</td>\n              {\n                this.state.planInputList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n            <tr>\n              <td key=\"title\">ATP</td>\n              <td key=\"empty\"></td>\n              {\n                this.state.ATPList.map((item, index) => <td key={index}>{item || ''}</td>)\n              }\n            </tr>\n          </tbody>\n          {/* <tfoot></tfoot> */}\n        </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'antd/dist/antd.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}